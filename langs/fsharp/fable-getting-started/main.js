// fable_modules/fable-library-js.4.14.0/Numeric.js
function isNumeric(x) {
  return typeof x === "number" || typeof x === "bigint" || x?.[symbol];
}
function compare(x, y) {
  if (typeof x === "number") {
    return x < y ? -1 : x > y ? 1 : 0;
  } else if (typeof x === "bigint") {
    return x < y ? -1 : x > y ? 1 : 0;
  } else {
    return x.CompareTo(y);
  }
}
function multiply(x, y) {
  if (typeof x === "number") {
    return x * y;
  } else if (typeof x === "bigint") {
    return x * BigInt(y);
  } else {
    return x[symbol]().multiply(y);
  }
}
function toFixed(x, dp) {
  if (typeof x === "number") {
    return x.toFixed(dp);
  } else if (typeof x === "bigint") {
    return x;
  } else {
    return x[symbol]().toFixed(dp);
  }
}
function toPrecision(x, sd) {
  if (typeof x === "number") {
    return x.toPrecision(sd);
  } else if (typeof x === "bigint") {
    return x;
  } else {
    return x[symbol]().toPrecision(sd);
  }
}
function toExponential(x, dp) {
  if (typeof x === "number") {
    return x.toExponential(dp);
  } else if (typeof x === "bigint") {
    return x;
  } else {
    return x[symbol]().toExponential(dp);
  }
}
function toHex(x) {
  if (typeof x === "number") {
    return (Number(x) >>> 0).toString(16);
  } else if (typeof x === "bigint") {
    return BigInt.asUintN(64, x).toString(16);
  } else {
    return x[symbol]().toHex();
  }
}
var symbol = Symbol("numeric");

// fable_modules/fable-library-js.4.14.0/Util.js
function padWithZeros(i, length) {
  return i.toString(10).padStart(length, "0");
}
class ObjectRef {
  static id(o) {
    if (!ObjectRef.idMap.has(o)) {
      ObjectRef.idMap.set(o, ++ObjectRef.count);
    }
    return ObjectRef.idMap.get(o);
  }
}
ObjectRef.idMap = new WeakMap();
ObjectRef.count = 0;
var curried = new WeakMap();

// fable_modules/fable-library-js.4.14.0/Types.js
function seqToString(self) {
  let count = 0;
  let str = "[";
  for (const x of self) {
    if (count === 0) {
      str += toString(x);
    } else if (count === 100) {
      str += "; ...";
      break;
    } else {
      str += "; " + toString(x);
    }
    count++;
  }
  return str + "]";
}
function toString(x, callStack = 0) {
  if (x != null && typeof x === "object") {
    if (typeof x.toString === "function") {
      return x.toString();
    } else if (Symbol.iterator in x) {
      return seqToString(x);
    } else {
      const cons = Object.getPrototypeOf(x)?.constructor;
      return cons === Object && callStack < 10
        ? "{ " +
            Object.entries(x)
              .map(([k, v]) => k + " = " + toString(v, callStack + 1))
              .join("\n  ") +
            " }"
        : cons?.name ?? "";
    }
  }
  return String(x);
}

// fable_modules/fable-library-js.4.14.0/Date.js
var parseRepeatToken = function (format, pos, patternChar) {
  let tokenLength = 0;
  let internalPos = pos;
  while (internalPos < format.length && format[internalPos] === patternChar) {
    internalPos++;
    tokenLength++;
  }
  return tokenLength;
};
var parseNextChar = function (format, pos) {
  if (pos >= format.length - 1) {
    return -1;
  }
  return format.charCodeAt(pos + 1);
};
var parseQuotedString = function (format, pos) {
  let beginPos = pos;
  const quoteChar = format[pos];
  let result = "";
  let foundQuote = false;
  while (pos < format.length) {
    pos++;
    const currentChar = format[pos];
    if (currentChar === quoteChar) {
      foundQuote = true;
      break;
    } else if (currentChar === "\\") {
      if (pos < format.length) {
        pos++;
        result += format[pos];
      } else {
        throw new Error("Invalid string format");
      }
    } else {
      result += currentChar;
    }
  }
  if (!foundQuote) {
    throw new Error(
      `Invalid string format could not find matching quote for ${quoteChar}`
    );
  }
  return [result, pos - beginPos + 1];
};
var dateToStringWithCustomFormat = function (date, format, utc) {
  let cursorPos = 0;
  let tokenLength = 0;
  let result = "";
  const localizedDate = utc ? DateTime(date.getTime(), 1) : date;
  while (cursorPos < format.length) {
    const token = format[cursorPos];
    switch (token) {
      case "d":
        tokenLength = parseRepeatToken(format, cursorPos, "d");
        cursorPos += tokenLength;
        switch (tokenLength) {
          case 1:
            result += localizedDate.getDate();
            break;
          case 2:
            result += padWithZeros(localizedDate.getDate(), 2);
            break;
          case 3:
            result += shortDays[dayOfWeek(localizedDate)];
            break;
          case 4:
            result += longDays[dayOfWeek(localizedDate)];
            break;
          default:
            break;
        }
        break;
      case "f":
        tokenLength = parseRepeatToken(format, cursorPos, "f");
        cursorPos += tokenLength;
        if (tokenLength <= 3) {
          const precision = 10 ** (3 - tokenLength);
          result += padWithZeros(
            Math.floor(millisecond(localizedDate) / precision),
            tokenLength
          );
        } else if (tokenLength <= 7) {
          result += ("" + millisecond(localizedDate)).padEnd(tokenLength, "0");
        }
        break;
      case "F":
        tokenLength = parseRepeatToken(format, cursorPos, "F");
        cursorPos += tokenLength;
        if (tokenLength <= 3) {
          const precision = 10 ** (3 - tokenLength);
          const value = Math.floor(millisecond(localizedDate) / precision);
          if (value != 0) {
            result += padWithZeros(value, tokenLength);
          }
        } else if (tokenLength <= 7) {
          const value = millisecond(localizedDate);
          if (value != 0) {
            result += padWithZeros(value, 3);
          }
        }
        break;
      case "g":
        tokenLength = parseRepeatToken(format, cursorPos, "g");
        cursorPos += tokenLength;
        if (tokenLength <= 2) {
          result += "A.D.";
        }
        break;
      case "h":
        tokenLength = parseRepeatToken(format, cursorPos, "h");
        cursorPos += tokenLength;
        switch (tokenLength) {
          case 1:
            result += hour(localizedDate) % 12;
            break;
          case 2:
            result += padWithZeros(hour(localizedDate) % 12, 2);
            break;
          default:
            break;
        }
        break;
      case "H":
        tokenLength = parseRepeatToken(format, cursorPos, "H");
        cursorPos += tokenLength;
        switch (tokenLength) {
          case 1:
            result += hour(localizedDate);
            break;
          case 2:
            result += padWithZeros(hour(localizedDate), 2);
            break;
          default:
            break;
        }
        break;
      case "K":
        tokenLength = parseRepeatToken(format, cursorPos, "K");
        cursorPos += tokenLength;
        switch (tokenLength) {
          case 1:
            switch (kind(localizedDate)) {
              case 1:
                result += "Z";
                break;
              case 2:
                result += dateOffsetToString(
                  localizedDate.getTimezoneOffset() * -60000
                );
                break;
              case 0:
                break;
            }
            break;
          default:
            break;
        }
        break;
      case "m":
        tokenLength = parseRepeatToken(format, cursorPos, "m");
        cursorPos += tokenLength;
        switch (tokenLength) {
          case 1:
            result += minute(localizedDate);
            break;
          case 2:
            result += padWithZeros(minute(localizedDate), 2);
            break;
          default:
            break;
        }
        break;
      case "M":
        tokenLength = parseRepeatToken(format, cursorPos, "M");
        cursorPos += tokenLength;
        switch (tokenLength) {
          case 1:
            result += month(localizedDate);
            break;
          case 2:
            result += padWithZeros(month(localizedDate), 2);
            break;
          case 3:
            result += shortMonths[month(localizedDate) - 1];
            break;
          case 4:
            result += longMonths[month(localizedDate) - 1];
            break;
          default:
            break;
        }
        break;
      case "s":
        tokenLength = parseRepeatToken(format, cursorPos, "s");
        cursorPos += tokenLength;
        switch (tokenLength) {
          case 1:
            result += second(localizedDate);
            break;
          case 2:
            result += padWithZeros(second(localizedDate), 2);
            break;
          default:
            break;
        }
        break;
      case "t":
        tokenLength = parseRepeatToken(format, cursorPos, "t");
        cursorPos += tokenLength;
        switch (tokenLength) {
          case 1:
            result += localizedDate.getHours() < 12 ? "A" : "P";
            break;
          case 2:
            result += localizedDate.getHours() < 12 ? "AM" : "PM";
            break;
          default:
            break;
        }
        break;
      case "y":
        tokenLength = parseRepeatToken(format, cursorPos, "y");
        cursorPos += tokenLength;
        switch (tokenLength) {
          case 1:
            result += localizedDate.getFullYear() % 100;
            break;
          case 2:
            result += padWithZeros(localizedDate.getFullYear() % 100, 2);
            break;
          case 3:
            result += padWithZeros(localizedDate.getFullYear(), 3);
            break;
          case 4:
            result += padWithZeros(localizedDate.getFullYear(), 4);
            break;
          case 5:
            result += padWithZeros(localizedDate.getFullYear(), 5);
            break;
          default:
            break;
        }
        break;
      case "z":
        tokenLength = parseRepeatToken(format, cursorPos, "z");
        cursorPos += tokenLength;
        let utcOffsetText = "";
        switch (kind(localizedDate)) {
          case 1:
            utcOffsetText = "+00:00";
            break;
          case 2:
            utcOffsetText = dateOffsetToString(
              localizedDate.getTimezoneOffset() * -60000
            );
            break;
          case 0:
            utcOffsetText = dateOffsetToString(
              toLocalTime(localizedDate).getTimezoneOffset() * -60000
            );
            break;
        }
        const sign = utcOffsetText[0] === "-" ? "-" : "+";
        const hours = parseInt(utcOffsetText.substring(1, 3), 10);
        const minutes = parseInt(utcOffsetText.substring(4, 6), 10);
        switch (tokenLength) {
          case 1:
            result += `${sign}${hours}`;
            break;
          case 2:
            result += `${sign}${padWithZeros(hours, 2)}`;
            break;
          default:
            result += `${sign}${padWithZeros(hours, 2)}:${padWithZeros(
              minutes,
              2
            )}`;
            break;
        }
        break;
      case ":":
        result += ":";
        cursorPos++;
        break;
      case "/":
        result += "/";
        cursorPos++;
        break;
      case "'":
      case '"':
        const [quotedString, quotedStringLenght] = parseQuotedString(
          format,
          cursorPos
        );
        result += quotedString;
        cursorPos += quotedStringLenght;
        break;
      case "%":
        const nextChar = parseNextChar(format, cursorPos);
        if (nextChar >= 0 && nextChar !== "%".charCodeAt(0)) {
          cursorPos += 2;
          result += dateToStringWithCustomFormat(
            localizedDate,
            String.fromCharCode(nextChar),
            utc
          );
        } else {
          throw new Error("Invalid format string");
        }
        break;
      case "\\":
        const nextChar2 = parseNextChar(format, cursorPos);
        if (nextChar2 >= 0) {
          cursorPos += 2;
          result += String.fromCharCode(nextChar2);
        } else {
          throw new Error("Invalid format string");
        }
        break;
      default:
        cursorPos++;
        result += token;
        break;
    }
  }
  return result;
};
function kind(value) {
  return value.kind || 0;
}
function dateOffsetToString(offset) {
  const isMinus = offset < 0;
  offset = Math.abs(offset);
  const hours = ~~(offset / 3600000);
  const minutes = (offset % 3600000) / 60000;
  return (
    (isMinus ? "-" : "+") +
    padWithZeros(hours, 2) +
    ":" +
    padWithZeros(minutes, 2)
  );
}
function dateToHalfUTCString(date, half) {
  const str = date.toISOString();
  return half === "first"
    ? str.substring(0, str.indexOf("T"))
    : str.substring(str.indexOf("T") + 1, str.length - 1);
}
var dateToISOString = function (d, utc) {
  if (utc) {
    return d.toISOString();
  } else {
    const printOffset = d.kind == null ? true : d.kind === 2;
    return (
      padWithZeros(d.getFullYear(), 4) +
      "-" +
      padWithZeros(d.getMonth() + 1, 2) +
      "-" +
      padWithZeros(d.getDate(), 2) +
      "T" +
      padWithZeros(d.getHours(), 2) +
      ":" +
      padWithZeros(d.getMinutes(), 2) +
      ":" +
      padWithZeros(d.getSeconds(), 2) +
      "." +
      padWithZeros(d.getMilliseconds(), 3) +
      (printOffset ? dateOffsetToString(d.getTimezoneOffset() * -60000) : "")
    );
  }
};
var dateToISOStringWithOffset = function (dateWithOffset, offset) {
  const str = dateWithOffset.toISOString();
  return str.substring(0, str.length - 1) + dateOffsetToString(offset);
};
var dateToStringWithOffset = function (date, format) {
  const d = new Date(date.getTime() + (date.offset ?? 0));
  if (typeof format !== "string") {
    return (
      d
        .toISOString()
        .replace(/\.\d+/, "")
        .replace(/[A-Z]|\.\d+/g, " ") + dateOffsetToString(date.offset ?? 0)
    );
  } else if (format.length === 1) {
    switch (format) {
      case "D":
      case "d":
        return dateToHalfUTCString(d, "first");
      case "T":
      case "t":
        return dateToHalfUTCString(d, "second");
      case "O":
      case "o":
        return dateToISOStringWithOffset(d, date.offset ?? 0);
      default:
        throw new Error("Unrecognized Date print format");
    }
  } else {
    return dateToStringWithCustomFormat(d, format, true);
  }
};
var dateToStringWithKind = function (date, format) {
  const utc = date.kind === 1;
  if (typeof format !== "string") {
    return utc ? date.toUTCString() : date.toLocaleString();
  } else if (format.length === 1) {
    switch (format) {
      case "D":
      case "d":
        return utc
          ? dateToHalfUTCString(date, "first")
          : date.toLocaleDateString();
      case "T":
      case "t":
        return utc
          ? dateToHalfUTCString(date, "second")
          : date.toLocaleTimeString();
      case "O":
      case "o":
        return dateToISOString(date, utc);
      default:
        throw new Error("Unrecognized Date print format");
    }
  } else {
    return dateToStringWithCustomFormat(date, format, utc);
  }
};
function toString2(date, format, _provider) {
  return date.offset != null
    ? dateToStringWithOffset(date, format)
    : dateToStringWithKind(date, format);
}
function DateTime(value, kind2) {
  const d = new Date(value);
  d.kind = (kind2 == null ? 0 : kind2) | 0;
  return d;
}
function toLocalTime(date) {
  return date.kind === 2 ? date : DateTime(date.getTime(), 2);
}
function hour(d) {
  return d.kind === 1 ? d.getUTCHours() : d.getHours();
}
function millisecond(d) {
  return d.kind === 1 ? d.getUTCMilliseconds() : d.getMilliseconds();
}
function minute(d) {
  return d.kind === 1 ? d.getUTCMinutes() : d.getMinutes();
}
function month(d) {
  return (d.kind === 1 ? d.getUTCMonth() : d.getMonth()) + 1;
}
function second(d) {
  return d.kind === 1 ? d.getUTCSeconds() : d.getSeconds();
}
function dayOfWeek(d) {
  return d.kind === 1 ? d.getUTCDay() : d.getDay();
}
var shortDays = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
var longDays = [
  "Sunday",
  "Monday",
  "Tuesday",
  "Wednesday",
  "Thursday",
  "Friday",
  "Saturday",
];
var shortMonths = [
  "Jan",
  "Feb",
  "Mar",
  "Apr",
  "May",
  "Jun",
  "Jul",
  "Aug",
  "Sep",
  "Oct",
  "Nov",
  "Dec",
];
var longMonths = [
  "January",
  "February",
  "March",
  "April",
  "May",
  "June",
  "July",
  "August",
  "September",
  "October",
  "November",
  "December",
];

// fable_modules/fable-library-js.4.14.0/String.js
var isLessThan = function (x, y) {
  return compare(x, y) < 0;
};
function printf(input) {
  return {
    input,
    cont: fsFormat(input),
  };
}
var continuePrint = function (cont, arg) {
  return typeof arg === "string" ? cont(arg) : arg.cont(cont);
};
function toConsole(arg) {
  return continuePrint((x) => console.log(x), arg);
}
var formatReplacement = function (rep, flags, padLength, precision, format) {
  let sign = "";
  flags = flags || "";
  format = format || "";
  if (isNumeric(rep)) {
    if (format.toLowerCase() !== "x") {
      if (isLessThan(rep, 0)) {
        rep = multiply(rep, -1);
        sign = "-";
      } else {
        if (flags.indexOf(" ") >= 0) {
          sign = " ";
        } else if (flags.indexOf("+") >= 0) {
          sign = "+";
        }
      }
    }
    precision = precision == null ? null : parseInt(precision, 10);
    switch (format) {
      case "f":
      case "F":
        precision = precision != null ? precision : 6;
        rep = toFixed(rep, precision);
        break;
      case "g":
      case "G":
        rep =
          precision != null ? toPrecision(rep, precision) : toPrecision(rep);
        break;
      case "e":
      case "E":
        rep =
          precision != null
            ? toExponential(rep, precision)
            : toExponential(rep);
        break;
      case "x":
        rep = toHex(rep);
        break;
      case "X":
        rep = toHex(rep).toUpperCase();
        break;
      default:
        rep = String(rep);
        break;
    }
  } else if (rep instanceof Date) {
    rep = toString2(rep);
  } else {
    rep = toString(rep);
  }
  padLength =
    typeof padLength === "number" ? padLength : parseInt(padLength, 10);
  if (!isNaN(padLength)) {
    const zeroFlag = flags.indexOf("0") >= 0;
    const minusFlag = flags.indexOf("-") >= 0;
    const ch = minusFlag || !zeroFlag ? " " : "0";
    if (ch === "0") {
      rep = pad(rep, padLength - sign.length, ch, minusFlag);
      rep = sign + rep;
    } else {
      rep = pad(sign + rep, padLength, ch, minusFlag);
    }
  } else {
    rep = sign + rep;
  }
  return rep;
};
var createPrinter = function (
  cont,
  _strParts,
  _matches,
  _result = "",
  padArg = -1
) {
  return (...args) => {
    let result = _result;
    const strParts = _strParts.slice();
    const matches = _matches.slice();
    for (const arg of args) {
      const [, , flags, _padLength, precision, format] = matches[0];
      let padLength = _padLength;
      if (padArg >= 0) {
        padLength = padArg;
        padArg = -1;
      } else if (padLength === "*") {
        if (arg < 0) {
          throw new Error("Non-negative number required");
        }
        padArg = arg;
        continue;
      }
      result += strParts[0];
      result += formatReplacement(arg, flags, padLength, precision, format);
      strParts.splice(0, 1);
      matches.splice(0, 1);
    }
    if (matches.length === 0) {
      result += strParts[0];
      return cont(result);
    } else {
      return createPrinter(cont, strParts, matches, result, padArg);
    }
  };
};
function fsFormat(str) {
  return (cont) => {
    fsFormatRegExp.lastIndex = 0;
    const strParts = [];
    const matches = [];
    let strIdx = 0;
    let match = fsFormatRegExp.exec(str);
    while (match) {
      const matchIndex = match.index + (match[1] || "").length;
      strParts.push(str.substring(strIdx, matchIndex).replace(/%%/g, "%"));
      matches.push(match);
      strIdx = fsFormatRegExp.lastIndex;
      fsFormatRegExp.lastIndex -= 1;
      match = fsFormatRegExp.exec(str);
    }
    if (strParts.length === 0) {
      return cont(str.replace(/%%/g, "%"));
    } else {
      strParts.push(str.substring(strIdx).replace(/%%/g, "%"));
      return createPrinter(cont, strParts, matches);
    }
  };
}
var pad = function (str, len, ch, isRight) {
  ch = ch || " ";
  len = len - str.length;
  for (let i = 0; i < len; i++) {
    str = isRight ? str + ch : ch + str;
  }
  return str;
};
var fsFormatRegExp = /(^|[^%])%([0+\- ]*)(\*|\d+)?(?:\.(\d+))?(\w)/g;

// Backend.fs.js
function hello(a, b) {
  toConsole(printf("hello, %s, %s"))(a)(b);
}
hello("mister", "interesting");
export { hello };

//# debugId=5ABCE75AC4F05AD664756e2164756e21
//# sourceMappingURL=data:application/json;base64,
